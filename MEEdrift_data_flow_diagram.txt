MEEdrift_data_flow_diagram.txt

EDI data
% ~~~~~~~~~~~~~~~~~~~
edi_BdvE_t2k
edi_B_dmpa
edi_d_dmpa
edi_E_dmpa
BdvE_xref2_edi

gd12_beam_t2k
gd12_virtual_dmpa
gd12_fv_dmpa
gd12_xref2_B

gd21_beam_t2k
gd21_virtual_dmpa
gd21_fv_dmpa
gd21_xref2_B

gd_beam_t2k = [ gd12_beam_t2k; gd21_beam_t2k ]

edi_gd_fv_dmpa      = [ double(gd12_fv_dmpa)' double(gd21_fv_dmpa)' ]  3 x n
edi_gd_virtual_dmpa = [ gd12_virtual_dmpa'    gd21_virtual_dmpa' ]

gd_beam_dn = spdftt2000todatenum (gd_beam_t2k)
BdvE_dn    = spdftt2000todatenum (edi_BdvE_t2k)

gd_xref2_BdvE = [ gd12_xref2_B; gd21_xref2_B ]

edi_B_dmpa = edi_B_dmpa'  3 x n
edi_d_dmpa = edi_d_dmpa'
edi_E_dmpa = edi_E_dmpa'

EDP data
% ~~~~~~~~~~~~~~~~~~~
edp_t2k
edp_E3D_dsl_r    n x 3
edp_E3D_Q

edp_dn = spdftt2000todatenum (edp_t2k)
edp_E3D_dsl = edp_E3D_dsl_r'               3 x n

Apply offsets
clear edp_E3D_dsl
edp_E3D_dsl = bsxfun (@plus, edp_E3D_dsl_r, EDP_offset); %  n x 3
edp_E3D_dsl = bsxfun (@times, edp_E3D_dsl, EDP_Xfactor); %  n x 3
edp_E3D_dsl = edp_E3D_dsl';


EDP data smoothing
Note here that
1) edp_E3D_dsl_r is nx3, and is the original.
2) edp_E3D_dsl   is 3xn, and is the working copy.
   Offsets are applied by copying _r to _dsl, and smoothing, if required;
   then moved to _s.
3) edp_E3D_dsl_s is nx3, and is transposed to _dsl for processing.
% ~~~~~~~~~~~~~~~~~~~
if SmoothData
	% _r here is nx3, which works well for plotting and matrix searches
	edp_E3D_dsl_s = RecursiveMovingAverageFilter (edp_E3D_dsl_r )

	if UseSmoothedData
		edp_E3D_dsl = edp_E3D_dsl_s'; % transpose it for math, replacing the
